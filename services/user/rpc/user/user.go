// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"
	pb2 "github.com/admgo/admgo/services/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserRequest                = pb2.CreateUserRequest
	CreateUserResponse               = pb2.CreateUserResponse
	DeleteUserRequest                = pb2.DeleteUserRequest
	DeleteUserResponse               = pb2.DeleteUserResponse
	FindAllUserRequest               = pb2.FindAllUserRequest
	FindAllUserResponse              = pb2.FindAllUserResponse
	FindSingleUserRequest            = pb2.FindSingleUserRequest
	FindSingleUserResponse           = pb2.FindSingleUserResponse
	UpdateUserEmailRequest           = pb2.UpdateUserEmailRequest
	UpdateUserEmailResponse          = pb2.UpdateUserEmailResponse
	UpdateUserEmployeeNumberRequest  = pb2.UpdateUserEmployeeNumberRequest
	UpdateUserEmployeeNumberResponse = pb2.UpdateUserEmployeeNumberResponse
	UpdateUserInfoRequest            = pb2.UpdateUserInfoRequest
	UpdateUserInfoResponse           = pb2.UpdateUserInfoResponse
	UpdateUserNameRequest            = pb2.UpdateUserNameRequest
	UpdateUserNameResponse           = pb2.UpdateUserNameResponse
	UpdateUserPhoneRequest           = pb2.UpdateUserPhoneRequest
	UpdateUserPhoneResponse          = pb2.UpdateUserPhoneResponse
	UserBase                         = pb2.UserBase

	User interface {
		// 创建用户
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		// 查找指定用户
		FindSingleUser(ctx context.Context, in *FindSingleUserRequest, opts ...grpc.CallOption) (*FindSingleUserResponse, error)
		// 查找所有用户
		FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*FindAllUserResponse, error)
		// 删除用户
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		// 更新用户信息（包括邮箱、用户名称等）
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
		// 更新用户邮箱
		UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error)
		// 更新用户名称
		UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
		// 更新用户手机号
		UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...grpc.CallOption) (*UpdateUserPhoneResponse, error)
		// 更新用户员工号
		UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, opts ...grpc.CallOption) (*UpdateUserEmployeeNumberResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 创建用户
func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

// 查找指定用户
func (m *defaultUser) FindSingleUser(ctx context.Context, in *FindSingleUserRequest, opts ...grpc.CallOption) (*FindSingleUserResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.FindSingleUser(ctx, in, opts...)
}

// 查找所有用户
func (m *defaultUser) FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*FindAllUserResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.FindAllUser(ctx, in, opts...)
}

// 删除用户
func (m *defaultUser) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

// 更新用户信息（包括邮箱、用户名称等）
func (m *defaultUser) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 更新用户邮箱
func (m *defaultUser) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.UpdateUserEmail(ctx, in, opts...)
}

// 更新用户名称
func (m *defaultUser) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.UpdateUserName(ctx, in, opts...)
}

// 更新用户手机号
func (m *defaultUser) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...grpc.CallOption) (*UpdateUserPhoneResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.UpdateUserPhone(ctx, in, opts...)
}

// 更新用户员工号
func (m *defaultUser) UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, opts ...grpc.CallOption) (*UpdateUserEmployeeNumberResponse, error) {
	client := pb2.NewUserClient(m.cli.Conn())
	return client.UpdateUserEmployeeNumber(ctx, in, opts...)
}
